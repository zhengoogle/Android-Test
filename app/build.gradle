apply plugin: 'com.android.application'
//apply plugin: 'jacoco-android'
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.7.9"
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.simple.androidtest"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':espressolibrary')
    implementation project(':jacocolibrary')
    implementation project(':androidxlibrary')
    implementation project(':pmocklibrary')
}


def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoAndtoidTestDebugReport(type:JacocoReport, dependsOn: "connectedDebugAndroidTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/outputs/code-coverage/connected/PE-UL00 - 6.0-coverage.ec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// TODO support muti module
def coverageSourceDirs1 = [
        '../app/src/main/java',
        '../espressolibrary/src/main/java'
]
task jacocoUnitTestReport1(type: JacocoReport, dependsOn: ['connectedAndroidTest']) {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

//    $buildDir = // Location of the build directory for the build Variant

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*'
    ]

    def javaClasses = fileTree(
            dir: "../app/build/intermediates/classes/debug",
            excludes: fileFilter
    )
    def jacocoClasses = fileTree(
            dir: "../espressolibrary/build/intermediates/classes/debug",
            excludes: fileFilter
    )

    classDirectories = files([javaClasses, jacocoClasses])
    additionalSourceDirs = files(coverageSourceDirs1)
    sourceDirectories = files(coverageSourceDirs1)
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ])

    reports {
        xml.enabled = true
        html.enabled = true
    }
}
